One to One Mapping
------------------------------------
we will take Order and the Address(billing Address) entities to perform One to One mapping.
Each Order has exactly one Address and each Address belongs to one order.
On the database level, this mapped by a foreign key column either on the address or the order table.

the @OneToOne JPA annotation is used to map the source entity with the target entity.

Note -The one-to-one mapping/association can be either unidirectional or bidirectional .
1. In unidirectional association, source entity has a relationship field that refers to the target entity
   and the source entity's table contains the foreign key.
2. In bidirectional association, each entity(i.e. source and target) has a relationship field that refers
   to each other and the target entity's table contains the foreign key. The source entity must
   use the mappedBy attribute to define the bidirectional one-to-one mapping.


One to Many mapping
-----------------------
we will take order and the orderItem entities to perform One to many mapping.
One order has many orderItem and many OrderItem belongs to one order.
In a relational database system, one to many association links two tables based on a foreign key
 column so that the child table record references the primary key of the parent table row.

Types
1. unidirectional
2. bidirectional

the unidirectional @OneToMany association is simpler  since it's just the parent-side that defines
the relationship.
In unidirectional mapping , we use only @OneToMany annotation.

The bidirectional association requires the child entity mapping to provide a @ManyToOne
annotation, which is responsible for controlling the association.
In bidirectional mapping, we use both @OneToMany and @ManyToOne annotations

Default fetchTypes for mappings
------------------------------------------

OneToMany : Lazy
ManyToOne : EAGER
ManyToMany: LAZY
OneToOne  : EAGER

ManyToMany mapping
----------------------------------------------
we will ake user and the role entities to perform many to many mapping
User has many roles and role has many users.

join tale to keep track of relationships
need to keep track of which user has which roles and vice and versa.
the many to many relationship is implemented using a third table called join table which
contains foreign key for each table.

the @ManyToMany Jpa annotation is used to link the source entity with the target entity.

A many to many association always uses an intermediate join table to store the association that
joins two entities. the join table is defined using the @JoinTable JPA annotation.